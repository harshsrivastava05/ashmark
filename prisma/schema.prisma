generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          CartItem[]
  addresses     Address[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?     @db.Text
  price       Decimal     @db.Decimal(10, 2)
  comparePrice Decimal?   @db.Decimal(10, 2)
  images      String[]
  sizes       Size[]
  colors      Color[]
  stock       Int         @default(0)
  featured    Boolean     @default(false)
  trending    Boolean     @default(false)
  categoryId  String      @map("category_id")
  category    Category    @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("products")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  productId String  @map("product_id")
  quantity  Int     @default(1)
  size      Size?
  color     Color?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, productId, size, color])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod   String?     @map("payment_method")
  razorpayOrderId String?     @map("razorpay_order_id")
  razorpayPaymentId String?   @map("razorpay_payment_id")
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String      @map("address_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  size      Size?
  color     Color?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
}

model Address {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  name     String
  phone    String
  street   String
  city     String
  state    String
  pincode  String
  country  String  @default("India")
  isDefault Boolean @default(false) @map("is_default")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

enum Role {
  USER
  ADMIN
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Color {
  BLACK
  WHITE
  GRAY
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
